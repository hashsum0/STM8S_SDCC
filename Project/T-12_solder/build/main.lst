                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _delay
                                     13 	.globl _out7seg
                                     14 	.globl _ADC_read
                                     15 	.globl _ADC_INIT
                                     16 	.globl _GPIO_init
                                     17 	.globl _Init_HSI
                                     18 	.globl _Init_HSE
                                     19 	.globl _q
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DATA
                                     24 ;--------------------------------------------------------
                                     25 ; ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area INITIALIZED
      000000                         28 _q::
      000000                         29 	.ds 2
                                     30 ;--------------------------------------------------------
                                     31 ; Stack segment in internal ram 
                                     32 ;--------------------------------------------------------
                                     33 	.area	SSEG
      000000                         34 __start__stack:
      000000                         35 	.ds	1
                                     36 
                                     37 ;--------------------------------------------------------
                                     38 ; absolute external ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DABS (ABS)
                                     41 ;--------------------------------------------------------
                                     42 ; interrupt vector 
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
      000000                         45 __interrupt_vect:
      000000 82v00u00u00             46 	int s_GSINIT ;reset
      000004 82 00 00 00             47 	int 0x0000 ;trap
      000008 82 00 00 00             48 	int 0x0000 ;int0
      00000C 82 00 00 00             49 	int 0x0000 ;int1
      000010 82 00 00 00             50 	int 0x0000 ;int2
      000014 82 00 00 00             51 	int 0x0000 ;int3
      000018 82 00 00 00             52 	int 0x0000 ;int4
      00001C 82 00 00 00             53 	int 0x0000 ;int5
      000020 82 00 00 00             54 	int 0x0000 ;int6
      000024 82 00 00 00             55 	int 0x0000 ;int7
      000028 82 00 00 00             56 	int 0x0000 ;int8
      00002C 82 00 00 00             57 	int 0x0000 ;int9
      000030 82 00 00 00             58 	int 0x0000 ;int10
      000034 82 00 00 00             59 	int 0x0000 ;int11
      000038 82 00 00 00             60 	int 0x0000 ;int12
      00003C 82 00 00 00             61 	int 0x0000 ;int13
      000040 82 00 00 00             62 	int 0x0000 ;int14
      000044 82 00 00 00             63 	int 0x0000 ;int15
      000048 82 00 00 00             64 	int 0x0000 ;int16
      00004C 82 00 00 00             65 	int 0x0000 ;int17
      000050 82 00 00 00             66 	int 0x0000 ;int18
      000054 82 00 00 00             67 	int 0x0000 ;int19
      000058 82 00 00 00             68 	int 0x0000 ;int20
      00005C 82 00 00 00             69 	int 0x0000 ;int21
      000060 82 00 00 00             70 	int 0x0000 ;int22
      000064 82 00 00 00             71 	int 0x0000 ;int23
      000068 82 00 00 00             72 	int 0x0000 ;int24
      00006C 82 00 00 00             73 	int 0x0000 ;int25
      000070 82 00 00 00             74 	int 0x0000 ;int26
      000074 82 00 00 00             75 	int 0x0000 ;int27
      000078 82 00 00 00             76 	int 0x0000 ;int28
      00007C 82 00 00 00             77 	int 0x0000 ;int29
                                     78 ;--------------------------------------------------------
                                     79 ; global & static initialisations
                                     80 ;--------------------------------------------------------
                                     81 	.area HOME
                                     82 	.area GSINIT
                                     83 	.area GSFINAL
                                     84 	.area GSINIT
      000000                         85 __sdcc_gs_init_startup:
      000000                         86 __sdcc_init_data:
                                     87 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   88 	ldw x, #l_DATA
      000003 27 07            [ 1]   89 	jreq	00002$
      000005                         90 00001$:
      000005 72 4FuFFuFF      [ 1]   91 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   92 	decw x
      00000A 26 F9            [ 1]   93 	jrne	00001$
      00000C                         94 00002$:
      00000C AEr00r00         [ 2]   95 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   96 	jreq	00004$
      000011                         97 00003$:
      000011 D6uFFuFF         [ 1]   98 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   99 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  100 	decw	x
      000018 26 F7            [ 1]  101 	jrne	00003$
      00001A                        102 00004$:
                                    103 ; stm8_genXINIT() end
                                    104 	.area GSFINAL
      000000 CCr00r80         [ 2]  105 	jp	__sdcc_program_startup
                                    106 ;--------------------------------------------------------
                                    107 ; Home
                                    108 ;--------------------------------------------------------
                                    109 	.area HOME
                                    110 	.area HOME
      000080                        111 __sdcc_program_startup:
      000080 CCr03r24         [ 2]  112 	jp	_main
                                    113 ;	return from main will return to caller
                                    114 ;--------------------------------------------------------
                                    115 ; code
                                    116 ;--------------------------------------------------------
                                    117 	.area CODE
                                    118 ;	inc/clk_init.h: 7: void Init_HSE(){    
                                    119 ;	-----------------------------------------
                                    120 ;	 function Init_HSE
                                    121 ;	-----------------------------------------
      000000                        122 _Init_HSE:
                                    123 ;	inc/clk_init.h: 8: CLK_ECKR|=CLK_ECKR_HSEEN;            
      000000 72 10 50 C1      [ 1]  124 	bset	0x50c1, #0
                                    125 ;	inc/clk_init.h: 9: CLK_SWCR|=CLK_SWCR_SWEN;               
      000004 AE 50 C5         [ 2]  126 	ldw	x, #0x50c5
      000007 F6               [ 1]  127 	ld	a, (x)
      000008 AA 02            [ 1]  128 	or	a, #0x02
      00000A F7               [ 1]  129 	ld	(x), a
                                    130 ;	inc/clk_init.h: 10: while((CLK_ECKR & CLK_ECKR_HSERDY) == 0) {} 
      00000B                        131 00101$:
      00000B AE 50 C1         [ 2]  132 	ldw	x, #0x50c1
      00000E F6               [ 1]  133 	ld	a, (x)
      00000F A5 02            [ 1]  134 	bcp	a, #0x02
      000011 27 F8            [ 1]  135 	jreq	00101$
                                    136 ;	inc/clk_init.h: 11: CLK_CKDIVR = 0;                    
      000013 35 00 50 C6      [ 1]  137 	mov	0x50c6+0, #0x00
                                    138 ;	inc/clk_init.h: 12: CLK_SWR = 0xB4;                    
      000017 35 B4 50 C4      [ 1]  139 	mov	0x50c4+0, #0xb4
                                    140 ;	inc/clk_init.h: 13: while ((CLK_SWCR & CLK_SWCR_SWIF) == 0){}
      00001B                        141 00104$:
      00001B AE 50 C5         [ 2]  142 	ldw	x, #0x50c5
      00001E F6               [ 1]  143 	ld	a, (x)
      00001F A5 08            [ 1]  144 	bcp	a, #0x08
      000021 27 F8            [ 1]  145 	jreq	00104$
                                    146 ;	inc/clk_init.h: 14: CLK_CSSR|=CLK_CSSR_CSSEN;
      000023 72 10 50 C8      [ 1]  147 	bset	0x50c8, #0
                                    148 ;	inc/clk_init.h: 15: CLK_CCOR=0; // CLK_CCOR|=(1<<2)|(1<<0);
      000027 35 00 50 C9      [ 1]  149 	mov	0x50c9+0, #0x00
      00002B 81               [ 4]  150 	ret
                                    151 ;	inc/clk_init.h: 18: void Init_HSI()
                                    152 ;	-----------------------------------------
                                    153 ;	 function Init_HSI
                                    154 ;	-----------------------------------------
      00002C                        155 _Init_HSI:
                                    156 ;	inc/clk_init.h: 20: CLK_ICKR = 0; // Сбрасываем регистр внутреннего тактирования
      00002C 35 00 50 C0      [ 1]  157 	mov	0x50c0+0, #0x00
                                    158 ;	inc/clk_init.h: 21: CLK_ICKR|=(1<<0); // Включаем внутренний генератор HSI
      000030 72 10 50 C0      [ 1]  159 	bset	0x50c0, #0
                                    160 ;	inc/clk_init.h: 22: CLK_ECKR = 0; // Отключаем внешний генератор
      000034 35 00 50 C1      [ 1]  161 	mov	0x50c1+0, #0x00
                                    162 ;	inc/clk_init.h: 23: while ((CLK_ICKR&(1<<1))== 0); // Ждём стабилизации внутреннего генератора
      000038                        163 00101$:
      000038 AE 50 C0         [ 2]  164 	ldw	x, #0x50c0
      00003B F6               [ 1]  165 	ld	a, (x)
      00003C A5 02            [ 1]  166 	bcp	a, #0x02
      00003E 27 F8            [ 1]  167 	jreq	00101$
                                    168 ;	inc/clk_init.h: 24: CLK_CKDIVR = 0; // Устанавливаем максимальную частоту
      000040 35 00 50 C6      [ 1]  169 	mov	0x50c6+0, #0x00
                                    170 ;	inc/clk_init.h: 25: CLK_CCOR = 0; // Выключаем CCO.
      000044 35 00 50 C9      [ 1]  171 	mov	0x50c9+0, #0x00
                                    172 ;	inc/clk_init.h: 26: CLK_HSITRIMR = 0; // Turn off any HSIU trimming.
      000048 35 00 50 CC      [ 1]  173 	mov	0x50cc+0, #0x00
                                    174 ;	inc/clk_init.h: 27: CLK_SWIMCCR = 0; // Set SWIM to run at clock / 2.
      00004C 35 00 50 CD      [ 1]  175 	mov	0x50cd+0, #0x00
                                    176 ;	inc/clk_init.h: 28: CLK_SWR = 0xe1; // Используем HSI в качестве источника тактиров
      000050 35 E1 50 C4      [ 1]  177 	mov	0x50c4+0, #0xe1
                                    178 ;	inc/clk_init.h: 29: CLK_SWCR = 0; // Сброс флага переключения генераторов
      000054 35 00 50 C5      [ 1]  179 	mov	0x50c5+0, #0x00
                                    180 ;	inc/clk_init.h: 30: CLK_SWCR= CLK_SWCR_SWEN; // Включаем переключение на HSI
      000058 35 02 50 C5      [ 1]  181 	mov	0x50c5+0, #0x02
                                    182 ;	inc/clk_init.h: 31: while ((CLK_SWCR&(1<<0)) != 0); // Пауза, пока произойдёт переключение(CLK_SWCR_SWBSY != 0)
      00005C                        183 00104$:
      00005C AE 50 C5         [ 2]  184 	ldw	x, #0x50c5
      00005F F6               [ 1]  185 	ld	a, (x)
      000060 44               [ 1]  186 	srl	a
      000061 25 F9            [ 1]  187 	jrc	00104$
      000063 81               [ 4]  188 	ret
                                    189 ;	inc/gpio_init.h: 4: void GPIO_init(void)
                                    190 ;	-----------------------------------------
                                    191 ;	 function GPIO_init
                                    192 ;	-----------------------------------------
      000064                        193 _GPIO_init:
                                    194 ;	inc/gpio_init.h: 7: PA_DDR = 0xFF;                                                        //_______PORT_IN
      000064 35 FF 50 02      [ 1]  195 	mov	0x5002+0, #0xff
                                    196 ;	inc/gpio_init.h: 8: PA_CR1 = 0xFF;                                                       //_______DDR________________CR1______________CR2___________FUNCTION  
      000068 35 FF 50 03      [ 1]  197 	mov	0x5003+0, #0xff
                                    198 ;	inc/gpio_init.h: 9: PA_CR2 = 0x00;                                                      //_______0__________________0________________0_____________bez podtiyzhki,bez prerbIvanii 
      00006C 35 00 50 04      [ 1]  199 	mov	0x5004+0, #0x00
                                    200 ;	inc/gpio_init.h: 11: PB_DDR = 0x00;                                                        //_______0__________________0________________1_____________bez podtiyzhki,c prerbIvaniem 
      000070 35 00 50 07      [ 1]  201 	mov	0x5007+0, #0x00
                                    202 ;	inc/gpio_init.h: 12: PB_CR1 = 0x00;                                                       //_______0__________________1________________1_____________c podtiyzhki,c prerbIvanii
      000074 35 00 50 08      [ 1]  203 	mov	0x5008+0, #0x00
                                    204 ;	inc/gpio_init.h: 13: PB_CR2 = 0x00;                                                      //_______PORT_OUT
      000078 35 00 50 09      [ 1]  205 	mov	0x5009+0, #0x00
                                    206 ;	inc/gpio_init.h: 15: PC_DDR = 0xFF;                                                        //_______1__________________0________________0_____________otkritiy stok
      00007C 35 FF 50 0C      [ 1]  207 	mov	0x500c+0, #0xff
                                    208 ;	inc/gpio_init.h: 16: PC_CR1 = 0xFF;                                                       //_______1__________________1________________0_____________dvuhtakthiy vihod
      000080 35 FF 50 0D      [ 1]  209 	mov	0x500d+0, #0xff
                                    210 ;	inc/gpio_init.h: 17: PC_CR2 = 0x00;                                                      //_______1__________________X________________1_____________skorost' do 10MHz
      000084 35 00 50 0E      [ 1]  211 	mov	0x500e+0, #0x00
                                    212 ;	inc/gpio_init.h: 19: PD_DDR = 0x3F;   
      000088 35 3F 50 11      [ 1]  213 	mov	0x5011+0, #0x3f
                                    214 ;	inc/gpio_init.h: 20: PD_CR1 = 0xFF;  
      00008C 35 FF 50 12      [ 1]  215 	mov	0x5012+0, #0xff
                                    216 ;	inc/gpio_init.h: 21: PD_CR2 = 0x00; 
      000090 35 00 50 13      [ 1]  217 	mov	0x5013+0, #0x00
                                    218 ;	inc/gpio_init.h: 23: PE_DDR = 0x01;   
      000094 35 01 50 16      [ 1]  219 	mov	0x5016+0, #0x01
                                    220 ;	inc/gpio_init.h: 24: PE_CR1 = 0x01;  
      000098 35 01 50 17      [ 1]  221 	mov	0x5017+0, #0x01
                                    222 ;	inc/gpio_init.h: 25: PE_CR2 = 0x00; 
      00009C 35 00 50 18      [ 1]  223 	mov	0x5018+0, #0x00
                                    224 ;	inc/gpio_init.h: 27: PF_DDR = 0xFF;   
      0000A0 35 FF 50 1B      [ 1]  225 	mov	0x501b+0, #0xff
                                    226 ;	inc/gpio_init.h: 28: PF_CR1 = 0xFF;  
      0000A4 35 FF 50 1C      [ 1]  227 	mov	0x501c+0, #0xff
                                    228 ;	inc/gpio_init.h: 29: PF_CR2 = 0x00; 
      0000A8 35 00 50 1D      [ 1]  229 	mov	0x501d+0, #0x00
                                    230 ;	inc/gpio_init.h: 31: PG_DDR = 0xFF;   
      0000AC 35 FF 50 20      [ 1]  231 	mov	0x5020+0, #0xff
                                    232 ;	inc/gpio_init.h: 32: PG_CR1 = 0xFF;  
      0000B0 35 FF 50 21      [ 1]  233 	mov	0x5021+0, #0xff
                                    234 ;	inc/gpio_init.h: 33: PG_CR2 = 0x00; 
      0000B4 35 00 50 22      [ 1]  235 	mov	0x5022+0, #0x00
      0000B8 81               [ 4]  236 	ret
                                    237 ;	inc/ADC.h: 51: void ADC_INIT(void){
                                    238 ;	-----------------------------------------
                                    239 ;	 function ADC_INIT
                                    240 ;	-----------------------------------------
      0000B9                        241 _ADC_INIT:
                                    242 ;	inc/ADC.h: 52: ADC_CSR_CH9;           //Выбераем канал
      0000B9 AE 54 00         [ 2]  243 	ldw	x, #0x5400
      0000BC F6               [ 1]  244 	ld	a, (x)
      0000BD AA 09            [ 1]  245 	or	a, #0x09
      0000BF F7               [ 1]  246 	ld	(x), a
                                    247 ;	inc/ADC.h: 53: ADC_CR1_SPSEL8;  //Делитель на 18            
      0000C0 AE 54 01         [ 2]  248 	ldw	x, #0x5401
      0000C3 F6               [ 1]  249 	ld	a, (x)
      0000C4 AA 40            [ 1]  250 	or	a, #0x40
      0000C6 F7               [ 1]  251 	ld	(x), a
                                    252 ;	inc/ADC.h: 54: ADC_TDRL_DIS(0);       //Отключаем тригер Шмидта
      0000C7 72 10 54 07      [ 1]  253 	bset	0x5407, #0
                                    254 ;	inc/ADC.h: 55: ADC_CR2_ALIGN_LEFT;    //Выравнивание по левому краю
      0000CB AE 54 02         [ 2]  255 	ldw	x, #0x5402
      0000CE F6               [ 1]  256 	ld	a, (x)
      0000CF A4 F7            [ 1]  257 	and	a, #0xf7
      0000D1 F7               [ 1]  258 	ld	(x), a
                                    259 ;	inc/ADC.h: 56: ADC_CR1_ADON_ON;       //Первый запуск ADC
      0000D2 72 10 54 01      [ 1]  260 	bset	0x5401, #0
      0000D6 81               [ 4]  261 	ret
                                    262 ;	inc/ADC.h: 58: int ADC_read(void){
                                    263 ;	-----------------------------------------
                                    264 ;	 function ADC_read
                                    265 ;	-----------------------------------------
      0000D7                        266 _ADC_read:
      0000D7 52 04            [ 2]  267 	sub	sp, #4
                                    268 ;	inc/ADC.h: 60: ADC_CR1_ADON_ON;
      0000D9 AE 54 01         [ 2]  269 	ldw	x, #0x5401
      0000DC F6               [ 1]  270 	ld	a, (x)
      0000DD AA 01            [ 1]  271 	or	a, #0x01
      0000DF F7               [ 1]  272 	ld	(x), a
                                    273 ;	inc/ADC.h: 61: for(t=0;t<64;t++){
      0000E0 AE 00 40         [ 2]  274 	ldw	x, #0x0040
      0000E3                        275 00104$:
                                    276 ;	inc/ADC.h: 62: __asm__("nop\n");
      0000E3 9D               [ 1]  277 	nop
      0000E4 5A               [ 2]  278 	decw	x
      0000E5 1F 03            [ 2]  279 	ldw	(0x03, sp), x
      0000E7 1E 03            [ 2]  280 	ldw	x, (0x03, sp)
                                    281 ;	inc/ADC.h: 61: for(t=0;t<64;t++){
      0000E9 16 03            [ 2]  282 	ldw	y, (0x03, sp)
      0000EB 26 F6            [ 1]  283 	jrne	00104$
                                    284 ;	inc/ADC.h: 64: data=ADC_DRH<<2;
      0000ED AE 54 04         [ 2]  285 	ldw	x, #0x5404
      0000F0 F6               [ 1]  286 	ld	a, (x)
      0000F1 5F               [ 1]  287 	clrw	x
      0000F2 97               [ 1]  288 	ld	xl, a
      0000F3 58               [ 2]  289 	sllw	x
      0000F4 58               [ 2]  290 	sllw	x
      0000F5 1F 01            [ 2]  291 	ldw	(0x01, sp), x
                                    292 ;	inc/ADC.h: 65: data=data+ADC_DRL;
      0000F7 AE 54 05         [ 2]  293 	ldw	x, #0x5405
      0000FA F6               [ 1]  294 	ld	a, (x)
      0000FB 5F               [ 1]  295 	clrw	x
      0000FC 97               [ 1]  296 	ld	xl, a
      0000FD 72 FB 01         [ 2]  297 	addw	x, (0x01, sp)
                                    298 ;	inc/ADC.h: 66: data=data>>1;
      000100 57               [ 2]  299 	sraw	x
                                    300 ;	inc/ADC.h: 67: return data;
      000101 5B 04            [ 2]  301 	addw	sp, #4
      000103 81               [ 4]  302 	ret
                                    303 ;	inc/7sig.h: 11: void out7seg(volatile int t)
                                    304 ;	-----------------------------------------
                                    305 ;	 function out7seg
                                    306 ;	-----------------------------------------
      000104                        307 _out7seg:
      000104 52 02            [ 2]  308 	sub	sp, #2
                                    309 ;	inc/7sig.h: 13: int num=0;
      000106 5F               [ 1]  310 	clrw	x
      000107 1F 01            [ 2]  311 	ldw	(0x01, sp), x
                                    312 ;	inc/7sig.h: 14: PC_ODR=0x00;
      000109 35 00 50 0A      [ 1]  313 	mov	0x500a+0, #0x00
                                    314 ;	inc/7sig.h: 15: PG_ODR=0x00;
      00010D 35 00 50 1E      [ 1]  315 	mov	0x501e+0, #0x00
                                    316 ;	inc/7sig.h: 16: PD_ODR&=~((1<<4) |(1<<3)|(1<<2));
      000111 AE 50 0F         [ 2]  317 	ldw	x, #0x500f
      000114 F6               [ 1]  318 	ld	a, (x)
      000115 A4 E3            [ 1]  319 	and	a, #0xe3
      000117 F7               [ 1]  320 	ld	(x), a
                                    321 ;	inc/7sig.h: 20: if(q==0) num=(t%1000/100),PD_ODR|=(1<<2);
      000118 CEu00u00         [ 2]  322 	ldw	x, _q+0
      00011B 26 1F            [ 1]  323 	jrne	00102$
      00011D 4B E8            [ 1]  324 	push	#0xe8
      00011F 4B 03            [ 1]  325 	push	#0x03
      000121 1E 07            [ 2]  326 	ldw	x, (0x07, sp)
      000123 89               [ 2]  327 	pushw	x
      000124 CDr00r00         [ 4]  328 	call	__modsint
      000127 5B 04            [ 2]  329 	addw	sp, #4
      000129 4B 64            [ 1]  330 	push	#0x64
      00012B 4B 00            [ 1]  331 	push	#0x00
      00012D 89               [ 2]  332 	pushw	x
      00012E CDr00r00         [ 4]  333 	call	__divsint
      000131 5B 04            [ 2]  334 	addw	sp, #4
      000133 1F 01            [ 2]  335 	ldw	(0x01, sp), x
      000135 AE 50 0F         [ 2]  336 	ldw	x, #0x500f
      000138 F6               [ 1]  337 	ld	a, (x)
      000139 AA 04            [ 1]  338 	or	a, #0x04
      00013B F7               [ 1]  339 	ld	(x), a
      00013C                        340 00102$:
                                    341 ;	inc/7sig.h: 21: if(q==1) num=(t%100/10),PD_ODR|=(1<<3);
      00013C CEu00u00         [ 2]  342 	ldw	x, _q+0
      00013F A3 00 01         [ 2]  343 	cpw	x, #0x0001
      000142 26 1F            [ 1]  344 	jrne	00104$
      000144 4B 64            [ 1]  345 	push	#0x64
      000146 4B 00            [ 1]  346 	push	#0x00
      000148 1E 07            [ 2]  347 	ldw	x, (0x07, sp)
      00014A 89               [ 2]  348 	pushw	x
      00014B CDr00r00         [ 4]  349 	call	__modsint
      00014E 5B 04            [ 2]  350 	addw	sp, #4
      000150 4B 0A            [ 1]  351 	push	#0x0a
      000152 4B 00            [ 1]  352 	push	#0x00
      000154 89               [ 2]  353 	pushw	x
      000155 CDr00r00         [ 4]  354 	call	__divsint
      000158 5B 04            [ 2]  355 	addw	sp, #4
      00015A 1F 01            [ 2]  356 	ldw	(0x01, sp), x
      00015C AE 50 0F         [ 2]  357 	ldw	x, #0x500f
      00015F F6               [ 1]  358 	ld	a, (x)
      000160 AA 08            [ 1]  359 	or	a, #0x08
      000162 F7               [ 1]  360 	ld	(x), a
      000163                        361 00104$:
                                    362 ;	inc/7sig.h: 22: if(q==2) num=(t%10),PD_ODR|=(1<<4);
      000163 CEu00u00         [ 2]  363 	ldw	x, _q+0
      000166 A3 00 02         [ 2]  364 	cpw	x, #0x0002
      000169 26 15            [ 1]  365 	jrne	00106$
      00016B 4B 0A            [ 1]  366 	push	#0x0a
      00016D 4B 00            [ 1]  367 	push	#0x00
      00016F 1E 07            [ 2]  368 	ldw	x, (0x07, sp)
      000171 89               [ 2]  369 	pushw	x
      000172 CDr00r00         [ 4]  370 	call	__modsint
      000175 5B 04            [ 2]  371 	addw	sp, #4
      000177 1F 01            [ 2]  372 	ldw	(0x01, sp), x
      000179 AE 50 0F         [ 2]  373 	ldw	x, #0x500f
      00017C F6               [ 1]  374 	ld	a, (x)
      00017D AA 10            [ 1]  375 	or	a, #0x10
      00017F F7               [ 1]  376 	ld	(x), a
      000180                        377 00106$:
                                    378 ;	inc/7sig.h: 23: q++;
      000180 CEu00u00         [ 2]  379 	ldw	x, _q+0
      000183 5C               [ 2]  380 	incw	x
                                    381 ;	inc/7sig.h: 24: if(q>2) q=0;
      000184 CFu00u00         [ 2]  382 	ldw	_q+0, x
      000187 A3 00 02         [ 2]  383 	cpw	x, #0x0002
      00018A 2D 04            [ 1]  384 	jrsle	00108$
      00018C 5F               [ 1]  385 	clrw	x
      00018D CFu00u00         [ 2]  386 	ldw	_q+0, x
      000190                        387 00108$:
                                    388 ;	inc/7sig.h: 25: switch (num)
      000190 0D 01            [ 1]  389 	tnz	(0x01, sp)
      000192 2A 03            [ 1]  390 	jrpl	00155$
      000194 CCr03r04         [ 2]  391 	jp	00121$
      000197                        392 00155$:
      000197 1E 01            [ 2]  393 	ldw	x, (0x01, sp)
      000199 A3 00 09         [ 2]  394 	cpw	x, #0x0009
      00019C 2D 03            [ 1]  395 	jrsle	00156$
      00019E CCr03r04         [ 2]  396 	jp	00121$
      0001A1                        397 00156$:
      0001A1 1E 01            [ 2]  398 	ldw	x, (0x01, sp)
      0001A3 58               [ 2]  399 	sllw	x
      0001A4 DEu01uA8         [ 2]  400 	ldw	x, (#00157$, x)
      0001A7 FC               [ 2]  401 	jp	(x)
      0001A8                        402 00157$:
      0001A8r01rBC                  403 	.dw	#00109$
      0001AAr01rE6                  404 	.dw	#00110$
      0001ACr01rF4                  405 	.dw	#00111$
      0001AEr02r17                  406 	.dw	#00112$
      0001B0r02r3A                  407 	.dw	#00113$
      0001B2r02r53                  408 	.dw	#00114$
      0001B4r02r76                  409 	.dw	#00115$
      0001B6r02r9F                  410 	.dw	#00116$
      0001B8r02rB3                  411 	.dw	#00117$
      0001BAr02rE0                  412 	.dw	#00118$
                                    413 ;	inc/7sig.h: 27: case 0:   
      0001BC                        414 00109$:
                                    415 ;	inc/7sig.h: 28: segA,segB,segC,segD,segE,segF;
      0001BC AE 50 1E         [ 2]  416 	ldw	x, #0x501e
      0001BF F6               [ 1]  417 	ld	a, (x)
      0001C0 AA 02            [ 1]  418 	or	a, #0x02
      0001C2 F7               [ 1]  419 	ld	(x), a
      0001C3 72 10 50 1E      [ 1]  420 	bset	0x501e, #0
      0001C7 AE 50 0A         [ 2]  421 	ldw	x, #0x500a
      0001CA F6               [ 1]  422 	ld	a, (x)
      0001CB AA 20            [ 1]  423 	or	a, #0x20
      0001CD F7               [ 1]  424 	ld	(x), a
      0001CE AE 50 0A         [ 2]  425 	ldw	x, #0x500a
      0001D1 F6               [ 1]  426 	ld	a, (x)
      0001D2 AA 04            [ 1]  427 	or	a, #0x04
      0001D4 F7               [ 1]  428 	ld	(x), a
      0001D5 AE 50 0A         [ 2]  429 	ldw	x, #0x500a
      0001D8 F6               [ 1]  430 	ld	a, (x)
      0001D9 AA 08            [ 1]  431 	or	a, #0x08
      0001DB F7               [ 1]  432 	ld	(x), a
      0001DC AE 50 0A         [ 2]  433 	ldw	x, #0x500a
      0001DF F6               [ 1]  434 	ld	a, (x)
      0001E0 AA 80            [ 1]  435 	or	a, #0x80
      0001E2 F7               [ 1]  436 	ld	(x), a
                                    437 ;	inc/7sig.h: 29: break;
      0001E3 CCr03r04         [ 2]  438 	jp	00121$
                                    439 ;	inc/7sig.h: 30: case 1:   
      0001E6                        440 00110$:
                                    441 ;	inc/7sig.h: 31: segB,segC;
      0001E6 72 10 50 1E      [ 1]  442 	bset	0x501e, #0
      0001EA AE 50 0A         [ 2]  443 	ldw	x, #0x500a
      0001ED F6               [ 1]  444 	ld	a, (x)
      0001EE AA 20            [ 1]  445 	or	a, #0x20
      0001F0 F7               [ 1]  446 	ld	(x), a
                                    447 ;	inc/7sig.h: 32: break;
      0001F1 CCr03r04         [ 2]  448 	jp	00121$
                                    449 ;	inc/7sig.h: 33: case 2:   
      0001F4                        450 00111$:
                                    451 ;	inc/7sig.h: 34: segA,segB,segG,segD,segE;
      0001F4 AE 50 1E         [ 2]  452 	ldw	x, #0x501e
      0001F7 F6               [ 1]  453 	ld	a, (x)
      0001F8 AA 02            [ 1]  454 	or	a, #0x02
      0001FA F7               [ 1]  455 	ld	(x), a
      0001FB 72 10 50 1E      [ 1]  456 	bset	0x501e, #0
      0001FF AE 50 0A         [ 2]  457 	ldw	x, #0x500a
      000202 F6               [ 1]  458 	ld	a, (x)
      000203 AA 40            [ 1]  459 	or	a, #0x40
      000205 F7               [ 1]  460 	ld	(x), a
      000206 AE 50 0A         [ 2]  461 	ldw	x, #0x500a
      000209 F6               [ 1]  462 	ld	a, (x)
      00020A AA 04            [ 1]  463 	or	a, #0x04
      00020C F7               [ 1]  464 	ld	(x), a
      00020D AE 50 0A         [ 2]  465 	ldw	x, #0x500a
      000210 F6               [ 1]  466 	ld	a, (x)
      000211 AA 08            [ 1]  467 	or	a, #0x08
      000213 F7               [ 1]  468 	ld	(x), a
                                    469 ;	inc/7sig.h: 35: break;
      000214 CCr03r04         [ 2]  470 	jp	00121$
                                    471 ;	inc/7sig.h: 36: case 3:   
      000217                        472 00112$:
                                    473 ;	inc/7sig.h: 37: segA,segB,segC,segD,segG;
      000217 AE 50 1E         [ 2]  474 	ldw	x, #0x501e
      00021A F6               [ 1]  475 	ld	a, (x)
      00021B AA 02            [ 1]  476 	or	a, #0x02
      00021D F7               [ 1]  477 	ld	(x), a
      00021E 72 10 50 1E      [ 1]  478 	bset	0x501e, #0
      000222 AE 50 0A         [ 2]  479 	ldw	x, #0x500a
      000225 F6               [ 1]  480 	ld	a, (x)
      000226 AA 20            [ 1]  481 	or	a, #0x20
      000228 F7               [ 1]  482 	ld	(x), a
      000229 AE 50 0A         [ 2]  483 	ldw	x, #0x500a
      00022C F6               [ 1]  484 	ld	a, (x)
      00022D AA 04            [ 1]  485 	or	a, #0x04
      00022F F7               [ 1]  486 	ld	(x), a
      000230 AE 50 0A         [ 2]  487 	ldw	x, #0x500a
      000233 F6               [ 1]  488 	ld	a, (x)
      000234 AA 40            [ 1]  489 	or	a, #0x40
      000236 F7               [ 1]  490 	ld	(x), a
                                    491 ;	inc/7sig.h: 38: break;
      000237 CCr03r04         [ 2]  492 	jp	00121$
                                    493 ;	inc/7sig.h: 39: case 4:   
      00023A                        494 00113$:
                                    495 ;	inc/7sig.h: 40: segF,segB,segG,segC;
      00023A 72 1E 50 0A      [ 1]  496 	bset	0x500a, #7
      00023E 72 10 50 1E      [ 1]  497 	bset	0x501e, #0
      000242 AE 50 0A         [ 2]  498 	ldw	x, #0x500a
      000245 F6               [ 1]  499 	ld	a, (x)
      000246 AA 40            [ 1]  500 	or	a, #0x40
      000248 F7               [ 1]  501 	ld	(x), a
      000249 AE 50 0A         [ 2]  502 	ldw	x, #0x500a
      00024C F6               [ 1]  503 	ld	a, (x)
      00024D AA 20            [ 1]  504 	or	a, #0x20
      00024F F7               [ 1]  505 	ld	(x), a
                                    506 ;	inc/7sig.h: 41: break;
      000250 CCr03r04         [ 2]  507 	jp	00121$
                                    508 ;	inc/7sig.h: 42: case 5:   
      000253                        509 00114$:
                                    510 ;	inc/7sig.h: 43: segA,segC,segD,segF,segG;
      000253 AE 50 1E         [ 2]  511 	ldw	x, #0x501e
      000256 F6               [ 1]  512 	ld	a, (x)
      000257 AA 02            [ 1]  513 	or	a, #0x02
      000259 F7               [ 1]  514 	ld	(x), a
      00025A AE 50 0A         [ 2]  515 	ldw	x, #0x500a
      00025D F6               [ 1]  516 	ld	a, (x)
      00025E AA 20            [ 1]  517 	or	a, #0x20
      000260 F7               [ 1]  518 	ld	(x), a
      000261 AE 50 0A         [ 2]  519 	ldw	x, #0x500a
      000264 F6               [ 1]  520 	ld	a, (x)
      000265 AA 04            [ 1]  521 	or	a, #0x04
      000267 F7               [ 1]  522 	ld	(x), a
      000268 72 1E 50 0A      [ 1]  523 	bset	0x500a, #7
      00026C AE 50 0A         [ 2]  524 	ldw	x, #0x500a
      00026F F6               [ 1]  525 	ld	a, (x)
      000270 AA 40            [ 1]  526 	or	a, #0x40
      000272 F7               [ 1]  527 	ld	(x), a
                                    528 ;	inc/7sig.h: 44: break;
      000273 CCr03r04         [ 2]  529 	jp	00121$
                                    530 ;	inc/7sig.h: 45: case 6:   
      000276                        531 00115$:
                                    532 ;	inc/7sig.h: 46: segA,segC,segD,segE,segF,segG;
      000276 AE 50 1E         [ 2]  533 	ldw	x, #0x501e
      000279 F6               [ 1]  534 	ld	a, (x)
      00027A AA 02            [ 1]  535 	or	a, #0x02
      00027C F7               [ 1]  536 	ld	(x), a
      00027D AE 50 0A         [ 2]  537 	ldw	x, #0x500a
      000280 F6               [ 1]  538 	ld	a, (x)
      000281 AA 20            [ 1]  539 	or	a, #0x20
      000283 F7               [ 1]  540 	ld	(x), a
      000284 AE 50 0A         [ 2]  541 	ldw	x, #0x500a
      000287 F6               [ 1]  542 	ld	a, (x)
      000288 AA 04            [ 1]  543 	or	a, #0x04
      00028A F7               [ 1]  544 	ld	(x), a
      00028B AE 50 0A         [ 2]  545 	ldw	x, #0x500a
      00028E F6               [ 1]  546 	ld	a, (x)
      00028F AA 08            [ 1]  547 	or	a, #0x08
      000291 F7               [ 1]  548 	ld	(x), a
      000292 72 1E 50 0A      [ 1]  549 	bset	0x500a, #7
      000296 AE 50 0A         [ 2]  550 	ldw	x, #0x500a
      000299 F6               [ 1]  551 	ld	a, (x)
      00029A AA 40            [ 1]  552 	or	a, #0x40
      00029C F7               [ 1]  553 	ld	(x), a
                                    554 ;	inc/7sig.h: 47: break;
      00029D 20 65            [ 2]  555 	jra	00121$
                                    556 ;	inc/7sig.h: 48: case 7:   
      00029F                        557 00116$:
                                    558 ;	inc/7sig.h: 49: segA,segB,segC;
      00029F AE 50 1E         [ 2]  559 	ldw	x, #0x501e
      0002A2 F6               [ 1]  560 	ld	a, (x)
      0002A3 AA 02            [ 1]  561 	or	a, #0x02
      0002A5 F7               [ 1]  562 	ld	(x), a
      0002A6 72 10 50 1E      [ 1]  563 	bset	0x501e, #0
      0002AA AE 50 0A         [ 2]  564 	ldw	x, #0x500a
      0002AD F6               [ 1]  565 	ld	a, (x)
      0002AE AA 20            [ 1]  566 	or	a, #0x20
      0002B0 F7               [ 1]  567 	ld	(x), a
                                    568 ;	inc/7sig.h: 50: break;
      0002B1 20 51            [ 2]  569 	jra	00121$
                                    570 ;	inc/7sig.h: 51: case 8:   
      0002B3                        571 00117$:
                                    572 ;	inc/7sig.h: 52: segA,segB,segC,segD,segE,segF,segG;
      0002B3 AE 50 1E         [ 2]  573 	ldw	x, #0x501e
      0002B6 F6               [ 1]  574 	ld	a, (x)
      0002B7 AA 02            [ 1]  575 	or	a, #0x02
      0002B9 F7               [ 1]  576 	ld	(x), a
      0002BA 72 10 50 1E      [ 1]  577 	bset	0x501e, #0
      0002BE AE 50 0A         [ 2]  578 	ldw	x, #0x500a
      0002C1 F6               [ 1]  579 	ld	a, (x)
      0002C2 AA 20            [ 1]  580 	or	a, #0x20
      0002C4 F7               [ 1]  581 	ld	(x), a
      0002C5 AE 50 0A         [ 2]  582 	ldw	x, #0x500a
      0002C8 F6               [ 1]  583 	ld	a, (x)
      0002C9 AA 04            [ 1]  584 	or	a, #0x04
      0002CB F7               [ 1]  585 	ld	(x), a
      0002CC AE 50 0A         [ 2]  586 	ldw	x, #0x500a
      0002CF F6               [ 1]  587 	ld	a, (x)
      0002D0 AA 08            [ 1]  588 	or	a, #0x08
      0002D2 F7               [ 1]  589 	ld	(x), a
      0002D3 72 1E 50 0A      [ 1]  590 	bset	0x500a, #7
      0002D7 AE 50 0A         [ 2]  591 	ldw	x, #0x500a
      0002DA F6               [ 1]  592 	ld	a, (x)
      0002DB AA 40            [ 1]  593 	or	a, #0x40
      0002DD F7               [ 1]  594 	ld	(x), a
                                    595 ;	inc/7sig.h: 53: break;
      0002DE 20 24            [ 2]  596 	jra	00121$
                                    597 ;	inc/7sig.h: 54: case 9:   
      0002E0                        598 00118$:
                                    599 ;	inc/7sig.h: 55: segA,segB,segC,segD,segF,segG;
      0002E0 AE 50 1E         [ 2]  600 	ldw	x, #0x501e
      0002E3 F6               [ 1]  601 	ld	a, (x)
      0002E4 AA 02            [ 1]  602 	or	a, #0x02
      0002E6 F7               [ 1]  603 	ld	(x), a
      0002E7 72 10 50 1E      [ 1]  604 	bset	0x501e, #0
      0002EB AE 50 0A         [ 2]  605 	ldw	x, #0x500a
      0002EE F6               [ 1]  606 	ld	a, (x)
      0002EF AA 20            [ 1]  607 	or	a, #0x20
      0002F1 F7               [ 1]  608 	ld	(x), a
      0002F2 AE 50 0A         [ 2]  609 	ldw	x, #0x500a
      0002F5 F6               [ 1]  610 	ld	a, (x)
      0002F6 AA 04            [ 1]  611 	or	a, #0x04
      0002F8 F7               [ 1]  612 	ld	(x), a
      0002F9 72 1E 50 0A      [ 1]  613 	bset	0x500a, #7
      0002FD AE 50 0A         [ 2]  614 	ldw	x, #0x500a
      000300 F6               [ 1]  615 	ld	a, (x)
      000301 AA 40            [ 1]  616 	or	a, #0x40
      000303 F7               [ 1]  617 	ld	(x), a
                                    618 ;	inc/7sig.h: 59: }
      000304                        619 00121$:
      000304 5B 02            [ 2]  620 	addw	sp, #2
      000306 81               [ 4]  621 	ret
                                    622 ;	main.c: 9: void delay(int t)
                                    623 ;	-----------------------------------------
                                    624 ;	 function delay
                                    625 ;	-----------------------------------------
      000307                        626 _delay:
      000307 52 02            [ 2]  627 	sub	sp, #2
                                    628 ;	main.c: 12: for(i=0;i<t;i++)
      000309 5F               [ 1]  629 	clrw	x
      00030A                        630 00107$:
      00030A 13 05            [ 2]  631 	cpw	x, (0x05, sp)
      00030C 2E 13            [ 1]  632 	jrsge	00109$
                                    633 ;	main.c: 14: for(s=0;s<32;s++)
      00030E 90 AE 00 20      [ 2]  634 	ldw	y, #0x0020
      000312 17 01            [ 2]  635 	ldw	(0x01, sp), y
      000314                        636 00105$:
      000314 16 01            [ 2]  637 	ldw	y, (0x01, sp)
      000316 90 5A            [ 2]  638 	decw	y
      000318 17 01            [ 2]  639 	ldw	(0x01, sp), y
      00031A 90 5D            [ 2]  640 	tnzw	y
      00031C 26 F6            [ 1]  641 	jrne	00105$
                                    642 ;	main.c: 12: for(i=0;i<t;i++)
      00031E 5C               [ 2]  643 	incw	x
      00031F 20 E9            [ 2]  644 	jra	00107$
      000321                        645 00109$:
      000321 5B 02            [ 2]  646 	addw	sp, #2
      000323 81               [ 4]  647 	ret
                                    648 ;	main.c: 20: void main(void)
                                    649 ;	-----------------------------------------
                                    650 ;	 function main
                                    651 ;	-----------------------------------------
      000324                        652 _main:
      000324 52 22            [ 2]  653 	sub	sp, #34
                                    654 ;	main.c: 24: int vzd=5,Kvzd=18,count=0,w=0,q=0;
      000326 5F               [ 1]  655 	clrw	x
      000327 1F 17            [ 2]  656 	ldw	(0x17, sp), x
      000329 5F               [ 1]  657 	clrw	x
      00032A 1F 13            [ 2]  658 	ldw	(0x13, sp), x
                                    659 ;	main.c: 25: int ustavka=280;								
      00032C AE 01 18         [ 2]  660 	ldw	x, #0x0118
      00032F 1F 11            [ 2]  661 	ldw	(0x11, sp), x
                                    662 ;	main.c: 26: int lcd=0;								
      000331 5F               [ 1]  663 	clrw	x
      000332 1F 0B            [ 2]  664 	ldw	(0x0b, sp), x
                                    665 ;	main.c: 29: float result=0.0,oldresult=0.0,k=0.2,Nresult=0.0;							
      000334 5F               [ 1]  666 	clrw	x
      000335 1F 03            [ 2]  667 	ldw	(0x03, sp), x
      000337 1F 01            [ 2]  668 	ldw	(0x01, sp), x
                                    669 ;	main.c: 32: Init_HSI();
      000339 CDr00r2C         [ 4]  670 	call	_Init_HSI
                                    671 ;	main.c: 33: GPIO_init();
      00033C CDr00r64         [ 4]  672 	call	_GPIO_init
                                    673 ;	main.c: 34: ADC_INIT();
      00033F CDr00rB9         [ 4]  674 	call	_ADC_INIT
                                    675 ;	main.c: 37: while(1)
      000342                        676 00126$:
                                    677 ;	main.c: 39: PC_ODR=0x00;
      000342 35 00 50 0A      [ 1]  678 	mov	0x500a+0, #0x00
                                    679 ;	main.c: 40: PG_ODR=0x00;
      000346 35 00 50 1E      [ 1]  680 	mov	0x501e+0, #0x00
                                    681 ;	main.c: 41: PD_ODR&=~((1<<4) |(1<<3)|(1<<2));
      00034A AE 50 0F         [ 2]  682 	ldw	x, #0x500f
      00034D F6               [ 1]  683 	ld	a, (x)
      00034E A4 E3            [ 1]  684 	and	a, #0xe3
      000350 F7               [ 1]  685 	ld	(x), a
                                    686 ;	main.c: 42: delay(32);
      000351 4B 20            [ 1]  687 	push	#0x20
      000353 4B 00            [ 1]  688 	push	#0x00
      000355 CDr03r07         [ 4]  689 	call	_delay
      000358 5B 02            [ 2]  690 	addw	sp, #2
                                    691 ;	main.c: 43: adc_data=ADC_read();						
      00035A CDr00rD7         [ 4]  692 	call	_ADC_read
                                    693 ;	main.c: 44: result=(k*adc_data)+(1-k)*oldresult;
      00035D 89               [ 2]  694 	pushw	x
      00035E CDr00r00         [ 4]  695 	call	___sint2fs
      000361 5B 02            [ 2]  696 	addw	sp, #2
      000363 89               [ 2]  697 	pushw	x
      000364 90 89            [ 2]  698 	pushw	y
      000366 4B CD            [ 1]  699 	push	#0xcd
      000368 4B CC            [ 1]  700 	push	#0xcc
      00036A 4B 4C            [ 1]  701 	push	#0x4c
      00036C 4B 3E            [ 1]  702 	push	#0x3e
      00036E CDr00r00         [ 4]  703 	call	___fsmul
      000371 5B 08            [ 2]  704 	addw	sp, #8
      000373 1F 1D            [ 2]  705 	ldw	(0x1d, sp), x
      000375 17 1B            [ 2]  706 	ldw	(0x1b, sp), y
      000377 1E 03            [ 2]  707 	ldw	x, (0x03, sp)
      000379 89               [ 2]  708 	pushw	x
      00037A 1E 03            [ 2]  709 	ldw	x, (0x03, sp)
      00037C 89               [ 2]  710 	pushw	x
      00037D 4B CD            [ 1]  711 	push	#0xcd
      00037F 4B CC            [ 1]  712 	push	#0xcc
      000381 4B 4C            [ 1]  713 	push	#0x4c
      000383 4B 3F            [ 1]  714 	push	#0x3f
      000385 CDr00r00         [ 4]  715 	call	___fsmul
      000388 5B 08            [ 2]  716 	addw	sp, #8
      00038A 89               [ 2]  717 	pushw	x
      00038B 90 89            [ 2]  718 	pushw	y
      00038D 1E 21            [ 2]  719 	ldw	x, (0x21, sp)
      00038F 89               [ 2]  720 	pushw	x
      000390 1E 21            [ 2]  721 	ldw	x, (0x21, sp)
      000392 89               [ 2]  722 	pushw	x
      000393 CDr00r00         [ 4]  723 	call	___fsadd
      000396 5B 08            [ 2]  724 	addw	sp, #8
      000398 1F 07            [ 2]  725 	ldw	(0x07, sp), x
      00039A 17 05            [ 2]  726 	ldw	(0x05, sp), y
                                    727 ;	main.c: 45: oldresult=result;
      00039C 16 07            [ 2]  728 	ldw	y, (0x07, sp)
      00039E 17 03            [ 2]  729 	ldw	(0x03, sp), y
      0003A0 16 05            [ 2]  730 	ldw	y, (0x05, sp)
      0003A2 17 01            [ 2]  731 	ldw	(0x01, sp), y
                                    732 ;	main.c: 46: Nresult=result+((ustavka>>1)-23);
      0003A4 1E 11            [ 2]  733 	ldw	x, (0x11, sp)
      0003A6 57               [ 2]  734 	sraw	x
      0003A7 1D 00 17         [ 2]  735 	subw	x, #0x0017
      0003AA 89               [ 2]  736 	pushw	x
      0003AB CDr00r00         [ 4]  737 	call	___sint2fs
      0003AE 5B 02            [ 2]  738 	addw	sp, #2
      0003B0 89               [ 2]  739 	pushw	x
      0003B1 90 89            [ 2]  740 	pushw	y
      0003B3 1E 0B            [ 2]  741 	ldw	x, (0x0b, sp)
      0003B5 89               [ 2]  742 	pushw	x
      0003B6 1E 0B            [ 2]  743 	ldw	x, (0x0b, sp)
      0003B8 89               [ 2]  744 	pushw	x
      0003B9 CDr00r00         [ 4]  745 	call	___fsadd
      0003BC 5B 08            [ 2]  746 	addw	sp, #8
      0003BE 1F 0F            [ 2]  747 	ldw	(0x0f, sp), x
      0003C0 17 0D            [ 2]  748 	ldw	(0x0d, sp), y
                                    749 ;	main.c: 47: vzd=(ustavka-Nresult)*4+16;
      0003C2 1E 11            [ 2]  750 	ldw	x, (0x11, sp)
      0003C4 89               [ 2]  751 	pushw	x
      0003C5 CDr00r00         [ 4]  752 	call	___sint2fs
      0003C8 5B 02            [ 2]  753 	addw	sp, #2
      0003CA 1F 21            [ 2]  754 	ldw	(0x21, sp), x
      0003CC 1E 0F            [ 2]  755 	ldw	x, (0x0f, sp)
      0003CE 89               [ 2]  756 	pushw	x
      0003CF 1E 0F            [ 2]  757 	ldw	x, (0x0f, sp)
      0003D1 89               [ 2]  758 	pushw	x
      0003D2 1E 25            [ 2]  759 	ldw	x, (0x25, sp)
      0003D4 89               [ 2]  760 	pushw	x
      0003D5 90 89            [ 2]  761 	pushw	y
      0003D7 CDr00r00         [ 4]  762 	call	___fssub
      0003DA 5B 08            [ 2]  763 	addw	sp, #8
      0003DC 89               [ 2]  764 	pushw	x
      0003DD 90 89            [ 2]  765 	pushw	y
      0003DF 5F               [ 1]  766 	clrw	x
      0003E0 89               [ 2]  767 	pushw	x
      0003E1 4B 80            [ 1]  768 	push	#0x80
      0003E3 4B 40            [ 1]  769 	push	#0x40
      0003E5 CDr00r00         [ 4]  770 	call	___fsmul
      0003E8 5B 08            [ 2]  771 	addw	sp, #8
      0003EA 4B 00            [ 1]  772 	push	#0x00
      0003EC 4B 00            [ 1]  773 	push	#0x00
      0003EE 4B 80            [ 1]  774 	push	#0x80
      0003F0 4B 41            [ 1]  775 	push	#0x41
      0003F2 89               [ 2]  776 	pushw	x
      0003F3 90 89            [ 2]  777 	pushw	y
      0003F5 CDr00r00         [ 4]  778 	call	___fsadd
      0003F8 5B 08            [ 2]  779 	addw	sp, #8
      0003FA 89               [ 2]  780 	pushw	x
      0003FB 90 89            [ 2]  781 	pushw	y
      0003FD CDr00r00         [ 4]  782 	call	___fs2sint
      000400 5B 04            [ 2]  783 	addw	sp, #4
      000402 1F 19            [ 2]  784 	ldw	(0x19, sp), x
                                    785 ;	main.c: 48: if(vzd>100)vzd=100;
      000404 1E 19            [ 2]  786 	ldw	x, (0x19, sp)
      000406 A3 00 64         [ 2]  787 	cpw	x, #0x0064
      000409 2D 05            [ 1]  788 	jrsle	00102$
      00040B AE 00 64         [ 2]  789 	ldw	x, #0x0064
      00040E 1F 19            [ 2]  790 	ldw	(0x19, sp), x
      000410                        791 00102$:
                                    792 ;	main.c: 49: if(vzd<4)vzd=4;
      000410 1E 19            [ 2]  793 	ldw	x, (0x19, sp)
      000412 A3 00 04         [ 2]  794 	cpw	x, #0x0004
      000415 2E 05            [ 1]  795 	jrsge	00104$
      000417 AE 00 04         [ 2]  796 	ldw	x, #0x0004
      00041A 1F 19            [ 2]  797 	ldw	(0x19, sp), x
      00041C                        798 00104$:
                                    799 ;	main.c: 50: if(count<=0)count=24,lcd=Nresult; 
      00041C 1E 17            [ 2]  800 	ldw	x, (0x17, sp)
      00041E A3 00 00         [ 2]  801 	cpw	x, #0x0000
      000421 2C 12            [ 1]  802 	jrsgt	00106$
      000423 AE 00 18         [ 2]  803 	ldw	x, #0x0018
      000426 1F 17            [ 2]  804 	ldw	(0x17, sp), x
      000428 1E 0F            [ 2]  805 	ldw	x, (0x0f, sp)
      00042A 89               [ 2]  806 	pushw	x
      00042B 1E 0F            [ 2]  807 	ldw	x, (0x0f, sp)
      00042D 89               [ 2]  808 	pushw	x
      00042E CDr00r00         [ 4]  809 	call	___fs2sint
      000431 5B 04            [ 2]  810 	addw	sp, #4
      000433 1F 0B            [ 2]  811 	ldw	(0x0b, sp), x
      000435                        812 00106$:
                                    813 ;	main.c: 53: bit_h(PE_ODR,0);
      000435 AE 50 14         [ 2]  814 	ldw	x, #0x5014
      000438 F6               [ 1]  815 	ld	a, (x)
      000439 AA 01            [ 1]  816 	or	a, #0x01
      00043B F7               [ 1]  817 	ld	(x), a
                                    818 ;	main.c: 54: for(period=0;period<100;period++)
      00043C 5F               [ 1]  819 	clrw	x
      00043D 1F 09            [ 2]  820 	ldw	(0x09, sp), x
      00043F                        821 00128$:
                                    822 ;	main.c: 56: if(period==vzd)bit_l(PE_ODR,0);
      00043F 1E 09            [ 2]  823 	ldw	x, (0x09, sp)
      000441 13 19            [ 2]  824 	cpw	x, (0x19, sp)
      000443 26 07            [ 1]  825 	jrne	00108$
      000445 AE 50 14         [ 2]  826 	ldw	x, #0x5014
      000448 F6               [ 1]  827 	ld	a, (x)
      000449 A4 FE            [ 1]  828 	and	a, #0xfe
      00044B F7               [ 1]  829 	ld	(x), a
      00044C                        830 00108$:
                                    831 ;	main.c: 57: if(period==20||period==60||period==100||period==140||period==180||period==220)out7seg(lcd);
      00044C 1E 09            [ 2]  832 	ldw	x, (0x09, sp)
      00044E A3 00 14         [ 2]  833 	cpw	x, #0x0014
      000451 27 23            [ 1]  834 	jreq	00109$
      000453 1E 09            [ 2]  835 	ldw	x, (0x09, sp)
      000455 A3 00 3C         [ 2]  836 	cpw	x, #0x003c
      000458 27 1C            [ 1]  837 	jreq	00109$
      00045A 1E 09            [ 2]  838 	ldw	x, (0x09, sp)
      00045C A3 00 64         [ 2]  839 	cpw	x, #0x0064
      00045F 27 15            [ 1]  840 	jreq	00109$
      000461 1E 09            [ 2]  841 	ldw	x, (0x09, sp)
      000463 A3 00 8C         [ 2]  842 	cpw	x, #0x008c
      000466 27 0E            [ 1]  843 	jreq	00109$
      000468 1E 09            [ 2]  844 	ldw	x, (0x09, sp)
      00046A A3 00 B4         [ 2]  845 	cpw	x, #0x00b4
      00046D 27 07            [ 1]  846 	jreq	00109$
      00046F 1E 09            [ 2]  847 	ldw	x, (0x09, sp)
      000471 A3 00 DC         [ 2]  848 	cpw	x, #0x00dc
      000474 26 08            [ 1]  849 	jrne	00110$
      000476                        850 00109$:
      000476 1E 0B            [ 2]  851 	ldw	x, (0x0b, sp)
      000478 89               [ 2]  852 	pushw	x
      000479 CDr01r04         [ 4]  853 	call	_out7seg
      00047C 5B 02            [ 2]  854 	addw	sp, #2
      00047E                        855 00110$:
                                    856 ;	main.c: 58: delay(2);
      00047E 4B 02            [ 1]  857 	push	#0x02
      000480 4B 00            [ 1]  858 	push	#0x00
      000482 CDr03r07         [ 4]  859 	call	_delay
      000485 5B 02            [ 2]  860 	addw	sp, #2
                                    861 ;	main.c: 59: w=(PD_IDR&((1<<7)|(1<<6)));
      000487 AE 50 10         [ 2]  862 	ldw	x, #0x5010
      00048A F6               [ 1]  863 	ld	a, (x)
      00048B A4 C0            [ 1]  864 	and	a, #0xc0
      00048D 5F               [ 1]  865 	clrw	x
      00048E 97               [ 1]  866 	ld	xl, a
      00048F 1F 15            [ 2]  867 	ldw	(0x15, sp), x
                                    868 ;	main.c: 60: if(w==0&&q==64&&ustavka<500) ustavka=ustavka+5,count=400,lcd=ustavka;
      000491 1E 15            [ 2]  869 	ldw	x, (0x15, sp)
      000493 26 1E            [ 1]  870 	jrne	00117$
      000495 1E 13            [ 2]  871 	ldw	x, (0x13, sp)
      000497 A3 00 40         [ 2]  872 	cpw	x, #0x0040
      00049A 26 17            [ 1]  873 	jrne	00117$
      00049C 1E 11            [ 2]  874 	ldw	x, (0x11, sp)
      00049E A3 01 F4         [ 2]  875 	cpw	x, #0x01f4
      0004A1 2E 10            [ 1]  876 	jrsge	00117$
      0004A3 1E 11            [ 2]  877 	ldw	x, (0x11, sp)
      0004A5 1C 00 05         [ 2]  878 	addw	x, #0x0005
      0004A8 1F 11            [ 2]  879 	ldw	(0x11, sp), x
      0004AA AE 01 90         [ 2]  880 	ldw	x, #0x0190
      0004AD 1F 17            [ 2]  881 	ldw	(0x17, sp), x
      0004AF 16 11            [ 2]  882 	ldw	y, (0x11, sp)
      0004B1 17 0B            [ 2]  883 	ldw	(0x0b, sp), y
      0004B3                        884 00117$:
                                    885 ;	main.c: 61: if(w==0&&q==128&&ustavka>200) ustavka=ustavka-5,count=400,lcd=ustavka;
      0004B3 1E 15            [ 2]  886 	ldw	x, (0x15, sp)
      0004B5 26 1E            [ 1]  887 	jrne	00121$
      0004B7 1E 13            [ 2]  888 	ldw	x, (0x13, sp)
      0004B9 A3 00 80         [ 2]  889 	cpw	x, #0x0080
      0004BC 26 17            [ 1]  890 	jrne	00121$
      0004BE 1E 11            [ 2]  891 	ldw	x, (0x11, sp)
      0004C0 A3 00 C8         [ 2]  892 	cpw	x, #0x00c8
      0004C3 2D 10            [ 1]  893 	jrsle	00121$
      0004C5 1E 11            [ 2]  894 	ldw	x, (0x11, sp)
      0004C7 1D 00 05         [ 2]  895 	subw	x, #0x0005
      0004CA 1F 11            [ 2]  896 	ldw	(0x11, sp), x
      0004CC AE 01 90         [ 2]  897 	ldw	x, #0x0190
      0004CF 1F 17            [ 2]  898 	ldw	(0x17, sp), x
      0004D1 16 11            [ 2]  899 	ldw	y, (0x11, sp)
      0004D3 17 0B            [ 2]  900 	ldw	(0x0b, sp), y
      0004D5                        901 00121$:
                                    902 ;	main.c: 62: q=w;
      0004D5 16 15            [ 2]  903 	ldw	y, (0x15, sp)
      0004D7 17 13            [ 2]  904 	ldw	(0x13, sp), y
                                    905 ;	main.c: 54: for(period=0;period<100;period++)
      0004D9 1E 09            [ 2]  906 	ldw	x, (0x09, sp)
      0004DB 5C               [ 2]  907 	incw	x
      0004DC 1F 09            [ 2]  908 	ldw	(0x09, sp), x
      0004DE 1E 09            [ 2]  909 	ldw	x, (0x09, sp)
      0004E0 A3 00 64         [ 2]  910 	cpw	x, #0x0064
      0004E3 2E 03            [ 1]  911 	jrsge	00239$
      0004E5 CCr04r3F         [ 2]  912 	jp	00128$
      0004E8                        913 00239$:
                                    914 ;	main.c: 64: bit_l(PE_ODR,0);
      0004E8 72 11 50 14      [ 1]  915 	bres	0x5014, #0
                                    916 ;	main.c: 65: count--;
      0004EC 1E 17            [ 2]  917 	ldw	x, (0x17, sp)
      0004EE 5A               [ 2]  918 	decw	x
      0004EF 1F 17            [ 2]  919 	ldw	(0x17, sp), x
      0004F1 CCr03r42         [ 2]  920 	jp	00126$
      0004F4 5B 22            [ 2]  921 	addw	sp, #34
      0004F6 81               [ 4]  922 	ret
                                    923 	.area CODE
                                    924 	.area INITIALIZER
      000000                        925 __xinit__q:
      000000 00 00                  926 	.dw #0x0000
                                    927 	.area CABS (ABS)
